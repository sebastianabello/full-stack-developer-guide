//游늷Promesa
//游닉Las promesas son una forma de manejar operaciones as칤ncronas de manera m치s legible y controlada que los callbacks anidados. Proporcionan una estructura para gestionar el flujo de control de una operaci칩n que puede tomar tiempo en completarse, como una solicitud de red, una lectura de archivo o cualquier tarea que no sea inmediata.

//游늷Tres estados posibles:
//游닉Pendiente (pending): El estado inicial de una promesa. Significa que la operaci칩n a칰n no se ha completado ni ha fallado.

//游닉Cumplida (fulfilled): Significa que la operaci칩n se complet칩 con 칠xito, y la promesa ha sido "resuelta" con un valor resultante.

//游닉Rechazada (rejected): Significa que la operaci칩n ha fallado, y la promesa ha sido "rechazada" con un motivo (un objeto que describe la raz칩n del fallo).

function cuadradoPromise(value) {
  if (typeof value !== "number") {
    return Promise.reject(
      `Error el valor "${value}" ingresado no es un numero`
    );
  }
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve({
        value,
        result: value * value,
      });
    }, 0 | (Math.random() * 1000));
  });
}

cuadradoPromise(0)
  .then((obj) => {
    console.log("Inicio Promise");
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(1);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(2);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(3);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    //error se captura en el catch y se sale
    return cuadradoPromise("4");
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    return cuadradoPromise(5);
  })
  .then((obj) => {
    console.log(`Promise: ${obj.value}, ${obj.result}`);
    console.log("Fin promise");
  })
  .catch((err) => console.error(err));

//游닉usamos then() para manejar el caso de 칠xito y catch() para manejar el caso de error.
//游닉Las promesas son especialmente 칰tiles cuando necesitas realizar m칰ltiples operaciones as칤ncronas y deseas controlar c칩mo se manejan sus resultados.
